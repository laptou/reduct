name: Reference types
levels:
  - board:
      - __note('`set` modifies a list and returns nothing (aka `void`).')
      - '__let(myList, [1, 2, 3, 4], () => __tuple(set(myList, _, -3), get(myList, _)))'
    toolbox:
      - 1
      - 1
      - 2
      - 2
      - 4
      - 4
    goal:
      - '-3'
    hint: The `set` function will modify myList, not create a new list.
  - board:
    - __note('`clone` will allow you to copy a list out of a reference')
    - >-
      __let(
        listA,
        [3, 3, 3, 3],
        () => __tuple(
          set(listA, 3, 4),
          _(listA)
        )
      )
    toolbox:
      - clone
    goal:
      - '[3, 3, 3, 4]'
  - board:
      - __note('`withItem` is like `set`, but returns a new list instead of modifying the existing one.')
      - >-
        __let(myList, [1, 2, 3, 4], 
          () => __tuple(
            withItem(myList, 2, _), 
            set(myList, 2, _), 
            clone(myList)
          )
        )
    toolbox:
      - -3
      - -4
    goal:
      - '[1, 2, -3, 4]'
      - '[1, 2, -4, 4]'
    hint: '`void` disappears when it lands on the board.'
  - board:
      - __note('Make a function that sets every item in `list` to 3.')
      - >-
        function override(list, index) {
          return index == _(list)
            ? VOID
            : __tuple(
              _(list, _, 3),
              override(_, _ + 1)
            );
        }
      - __let(listX, [0, 0, 1, 2], () => __tuple(
          override(listX, 0),
          clone(listX)
        ))
    toolbox:
      - length
      - set
      - withItem
      - list
      - eat
      - index
      - index
    goal:
      - '[3, 3, 3, 3]'
    hint: '`eat` does nothing and always returns void. Is that what you want?'
