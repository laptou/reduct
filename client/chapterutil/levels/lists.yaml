name: Lists / Strings / Recursion
levels:
  - board:
      - '[_, _, _]'
      - __note('This is a list. As you can see, its empty. Try placing objects in it!')
    toolbox:
      - STAR
      - RECT
      - TRIANGLE
      - CIRCLE
      - '9'
    goal:
      - '[STAR, RECT, TRIANGLE]'
    defines: []
  - board:
      - '[_, _]'
      - '[1]'
      - '[TRIANGLE, CIRCLE]'
      - 'function head(a) {return get(a,0);}'
      - >-
        function removeFirst(a) {return length(a) < 2 ? []: slice(a, 1,
        length(a))}
      - >- 
        __note('Check out these functions. One of them returns the first element
        in a list, and one removes the first element.')
    toolbox:
      - STAR
      - RECT
      - removeFirst
      - head
      - removeFirst
      - head
    note:
      - null
    goal:
      - STAR
      - '[]'
      - CIRCLE
  - board:
      - '[1]'
      - 'map(_, addOne)'
      - >-
        __note('This is map. Map applies a function to every element in a list')
      - >-
        __note('This is concat. It joins two lists together.')
      - concat(_, _)
    toolbox:
      - '[4]'
      - '[1,3, _]'
      - '[2,4]'
      - STAR
      - '[5]'
      - '4'
    globals:
      add : 
        addOne : 'function addOne(number) { return (number + 1); }'
      hide : []
    note:
      - null
    goal:
      - '[2,4,5,1]'
  - board:
      - >- 
          'function contains(list, target, pointer){ return  _ (pointer) ? false :
          ((_ == _) ? true : ( contains(list, pointer + 1, target))); }'
      - >-
          __note('Lets work on a contains, which returns true if a given element is in a list, and false if not.
          Notice that contains is recursive, and that the counter parameter changes at the recursive call. ')
      - >- 
          __note('After we have visited every element in the list, we want to return false.
          How can you use the pointer to achieve this effect? ')
    toolbox:
      - contains
      - contains
      - length
      - list
      - get(list, pointer)
      - target
      - 'pointer => (pointer == (_) (_))'
      - '[6,7,9,12]'
      - '[12,9,7,6]'
      - 0
      - 4
      - 11
      - 12
      - 0
    hint:
      - >-
        'contains takes three arguments, a list, a target, and a pointer.
        What should the value of the pointer be when it is first passed to the
        function?'
    note:
      - null
    goal:
      - false
      - true
  - board:
      - >-
          __note('Complete the body of getIndex.
          getIndex takes three arguments, a list, a target, and a pointer.
          If the target element is in the list, getIndex returns the index
          of the target element, or -1 if not.')
      - >-
          function getIndex(list,target,pointer){ return (_ (_)) ? -1 :
          ((_ (_) (_) (_)) ? _ : (getIndex(_, _, (_ + 1)))); }
      - 'x => (x == (_) (_))'
      - 'function isTarget(list,target,pointer) {return ( (_(_,_)) == _ );}'
      
    toolbox:
      - getIndex
      - isTarget
      - __unlimited;list
      - __unlimited;target
      - __unlimited;pointer
      - length
      - get
      - '[7,9,2,5,18]'
      - 0
      - 1
      - 2
    hint:
      - 'Remember the recursive structure of the contains function.'
    goal:
      - 2




    

