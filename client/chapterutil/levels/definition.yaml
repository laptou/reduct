name: Definition / Scope
levels:
  - board:
      - 'function star() { return STAR; }'
    toolbox:
      - 'star'
    defines: []
    goal:
      - STAR
    hint: Move the def block to the left box to define the word star!
  - board:
      - 'function isStar(symbol) { return (STAR == symbol); }'
      - 'function isRect(symbol) { return (RECT == symbol); }'
      - 'function star() { return STAR; }'
      - 'function rect() { return RECT; }'
    toolbox:
      - __unlimited;isStar
      - __unlimited;isRect
      - __unlimited;rect
      - __unlimited;star
    defines: []
    goal:
      - true
      - false
      - false
    hint:
      - Add these functions to the global scope, and then use their names to get references to them.
  - board:
      - 'function addOne(number) { return (number + 1); }'
      - 'function addTwo(fun, number) { return ((fun) (number)) + 1; }'
      - __note('How can you use addOne to get to the answer?')
    toolbox:
      - 5
      - 2
      - addOne
      - addTwo
    defines: []
    goal:
      - 7
    hint:
      - 'Check out the tutorial on the left for let expressions.'
  - board:
      - '__let(x, _, () => x + x)'
    toolbox:
      - 1
      - 3
      - 2
    defines: []
    goal:
      - 4
    hint:
  - board:
      - '__let(x, _, x => __let(y, _, y => x - y ))'
    toolbox:
      - 3
      - 5
      - 7
      - 4
    defines: []
    goal:
      - 4
    hint:
  - board:
      - '__let(x, _, x => __let(x, _, x => x + 5 ))'
    toolbox:
      - 3
      - 2
      - 4
      - 5
      - 7
    defines: []
    goal:
      - 9
    hint:
  - board:
      - '__let(outer, _, outer => __tuple(__let(inner, _, inner => (outer > inner) ? STAR : RECT), __let(inner, _, inner => (outer == inner) ? STAR : RECT)))'
    toolbox:
      - 0
      - 5
      - 1
      - 3
      - 3
    defines: []
    goal:
      - RECT
      - STAR
    hint:
  - board:
      - __let(myFun, _, () => __let(number, _, () => __let(number, _, () => myFun (number) )))
      - 'number => (number == _)'
      - '(number => _ (number)) (_)'
      - 'function myFun(number) {return (number == _ ? true : false)}'
      - 'function swapper(boolean) {return (boolean == true ? false : true)}'
      - swapper
      - swapper
      - swapper
    toolbox:
      - myFun
      - myFun
      - 0
      - 5
      - 0
      - 5
      - 0
      - 1
    defines: []
    goal:
      - false
      - true
      - true
    hint:
