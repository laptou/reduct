name: Definition / Scope
levels:
  - board:
      - 'function star() { return STAR; }'
    toolbox:
      - 'star'
    defines: []
    goal:
      - STAR
    hint: Move the def block to the left box to define the word star!
  - board:
      - 'function isStar(symbol) { return (STAR == symbol); }'
      - 'function isRect(symbol) { return (RECT == symbol); }'
      - 'function star() { return STAR; }'
      - 'function rect() { return RECT; }'
    toolbox:
      - __unlimited;isStar(_)
      - __unlimited;isRect(_)
      - __unlimited;rect(_)
      - __unlimited;star(_)
    defines: []
    goal:
      - true
      - false
      - false
  - board:
      - 'function addOne(number) { return (number + 1); }'
      - 'function twice(fun, number) { return fun(fun(number))}'
    toolbox:
      - 5
      - 2
      - addOne
      - twice(_, _)
    defines: []
    goal:
      - 7
    hint:
      -  You can use functions (like addOne) as arguments to other functions.
  - board:
      - '__let(x, _, () => x + x)'
    toolbox:
      - 1
      - 3
      - 2
    defines: []
    goal:
      - 4
    hint:
      - 'Check out the tutorial on the left for let expressions!'
  - board:
      - '__let(x, _, x => __let(y, _, y => x - y ))'
    toolbox:
      - 3
      - 5
      - 7
      - 4
    defines: []
    goal:
      - 4
    hint:
  - board:
      - '__let(x, _, x => __let(x, _, x => x + 5 ))'
    toolbox:
      - 3
      - 2
      - 4
      - 5
      - 7
    defines: []
    goal:
      - 9
    hint:
  - board:
      - '__let(outer, _, outer => __tuple(__let(inner, _, inner => (outer > inner) ? STAR : RECT), __let(inner, _, inner => (outer == inner) ? STAR : RECT)))'
    toolbox:
      - 0
      - 5
      - 1
      - 3
      - 3
    defines: []
    goal:
      - RECT
      - STAR
  - board:
      - __let(myFun, _, () => __let(number, _, () => myFun (number)))
      - 'number => (number == _)'
      - 'function myFun(number) {return (number == _ ? true : false)}'
      - invert(_)
      - invert(_)
      - invert(_)
    toolbox:
      - myFun(_)
      - myFun(_)
      - 0
      - 5
      - 0
      - 5
      - 0
      - 1
    globals:
      add:
        invert: 'function invert(bool) {return (!bool)}'
    goal:
      - false
      - true
      - true
    hint: You have to use all of those invert() blocks.
