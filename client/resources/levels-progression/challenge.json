{"levels":[{"board":["__note('Calculate 2^n.')","pow(0)","pow(1)","pow(3)","function pow(n) {\n  return _ == 0\n    ? 1\n    : _(_) + _(_ - 1)\n}"],"goal":[1,2,8],"toolbox":["n","n","n","pow","pow","_ - 1","_ || _","_ + 1"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]},{"board":["__note('Define `repeat`, which applies `fun` to `value` n times.')","repeat(x => x + x, 2, 5)","function repeat(fun, value, n) {\n  return _\n}","(_ == _) ? _ : repeat(fun, _(_), _)"],"goal":[64],"toolbox":["n","m","n","value","value","fun","_ - 1",0,1,"michael","[STAR]"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]},{"board":["__note('Define `replace`, which returns a new list where every instance of `oldItem` in `list` has been replaced with `newItem`.')","replace([CIRCLE, RECT, TRIANGLE, STAR, CIRCLE], CIRCLE, STAR, 0)","function replace(list, oldItem, newItem, index) {\n  return index == length(list)\n    ? list\n    : get(list, index) == oldItem\n      ? replace(withItem(list, index, newItem), oldItem, newItem, index + 1)\n      : replace(list, oldItem, newItem, index + 1);\n}"],"goal":["[STAR, RECT, TRIANGLE, STAR, STAR]"],"toolbox":["n","n","value","value","fun","_ - 1","[STAR]",0,"set"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]}],"name":"Challenges"}
