{"levels":[{"board":["__note('`set` modifies a list and returns nothing (aka `void`).')","__let(myList, [1, 2, 3, 4], () => __tuple(set(myList, _, -3), get(myList, _)))"],"goal":["-3"],"toolbox":[1,1,2,2,4,4],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":"The `set` function will modify myList, not create a new list."},{"board":["__note('`withItem` is like `set`, but returns a new list instead of modifying the existing one.')","__let(myList, [1, 2, 3, 4], \n  () => __tuple(\n    withItem(myList, 2, _), \n    set(myList, 2, _), \n    get(myList, 2)\n  )\n)"],"goal":[-3,-4],"toolbox":[-3,-4],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":"`void` disappears when it lands on the board."},{"board":["__note('`clone` will allow you to copy a list out of a reference')","__let(\n  listA,\n  [3, 3, 3, 3],\n  () => __tuple(\n    set(listA, 3, 4),\n    _(listA)\n  )\n)"],"goal":["[3, 3, 3, 4]"],"toolbox":["clone"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]},{"board":["__note('Make a function that sets every item in `list` to 3.')","function override(list, index) {\n  return index == _(list)\n    ? VOID\n    : __tuple(\n      _(list, _, 3),\n      override(list, _ + 1)\n    );\n}","__let(listX, [0, 0, 1, 2], () => __tuple( override(listX, 0), clone(listX) ))"],"goal":["[3, 3, 3, 3]"],"toolbox":["length","set","index","index"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]}],"name":"Reference types"}
