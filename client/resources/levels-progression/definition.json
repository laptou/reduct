{"levels":[{"board":["function star() { return STAR; }"],"goal":["STAR"],"toolbox":["star"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":"Move the def block to the left box to define the word star!"},{"board":["function isStar(symbol) { return (STAR == symbol); }","function isRect(symbol) { return (RECT == symbol); }","function star() { return STAR; }","function rect() { return RECT; }"],"goal":[true,false,false],"toolbox":["__unlimited;isStar","__unlimited;isRect","__unlimited;rect","__unlimited;star"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":["Add these functions to the global scope, and then use their names to get references to them."]},{"board":["function addOne(number) { return (number + 1); }","function addTwo(fun, number) { return ((fun) (number)) + 1; }","__note('How can you use addOne to get to the answer?')"],"goal":[7],"toolbox":[5,2,"addOne","addTwo"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":["Check out the tutorial on the left for let expressions."]},{"board":["__let(x, _, () => x + x)"],"goal":[4],"toolbox":[1,3,2],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":null},{"board":["__let(x, _, x => __let(y, _, y => x - y ))"],"goal":[4],"toolbox":[3,5,7,4],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":null},{"board":["__let(x, _, x => __let(x, _, x => x + 5 ))"],"goal":[9],"toolbox":[3,2,4,5,7],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":null},{"board":["__let(outer, _, outer => __tuple(__let(inner, _, inner => (outer > inner) ? STAR : RECT), __let(inner, _, inner => (outer == inner) ? STAR : RECT)))"],"goal":["RECT","STAR"],"toolbox":[0,5,1,3,3],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":null},{"board":["__let(myFun, _, () => __let(number, _, () => __let(number, _, () => myFun (number) )))","number => (number == _)","(number => _ (number)) (_)","function myFun(number) {return (number == _ ? true : false)}","function swapper(boolean) {return (boolean == true ? false : true)}","swapper","swapper","swapper"],"goal":[false,true,true],"toolbox":["myFun","myFun",0,5,0,5,0,1],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":null}],"name":"Definition / Scope"}
