{"levels":[{"board":["[_, _, _]"],"goal":["[STAR, RECT, TRIANGLE]"],"toolbox":["STAR","RECT","TRIANGLE","CIRCLE","9"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":["Try filling in the empty slots in that list."]},{"board":["[_, _]","[1]","[TRIANGLE, CIRCLE]","function getFirst(a) {return get(a,0);}","function removeFirst(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}"],"goal":["STAR","[]","CIRCLE"],"toolbox":["STAR","RECT","removeFirst(_)","getFirst(_)","removeFirst(_)","getFirst(_)"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[]},{"board":["[1]","map(_, addOne)","__note('`map` applies a function to every element in a list and returns a new list\\n\\n`concat` joins two lists together into a new list')","concat(_, _)"],"goal":["[2,4,5,1]"],"toolbox":["[4]","[1,3, _]","[2,4]","STAR","[5]","4"],"syntax":[],"defines":[],"globals":{"addOne":"function addOne(number) { return (number + 1); }"},"hideGlobals":[],"input":[],"output":[]},{"board":["function contains(list, target, index) { \n  return  _ \n    ? false \n    : (_ ==_ \n      ? true \n      : contains(list, target, index + 1)); }","__note('Contains should return true if `list` contains `target`, and false otherwise')"],"goal":[false,true],"toolbox":["length","list","index","get(list, _)","target","index == _(_)","contains([6,7,9,12], 7, _)","contains(_, 11, _)","[6,7,9,12]",0,0],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":["What's a good starting value for `index`?"]},{"board":["__note('`getIndex` should return the index at which `target` appears in `list`, or -1 if `target` is not found.')","function getIndex(list,target,index) { return (_ == _(_)) ? -1 : (_(list, _) == _) ? _ : getIndex(_, _, _ + 1); }"],"goal":[3],"toolbox":["getIndex(_,2, 0)","__unlimited;list","__unlimited;target","__unlimited;index","length","get","[7,9,5,2,18]"],"syntax":[],"defines":[],"globals":{},"hideGlobals":[],"input":[],"output":[],"textgoal":["Remember the recursive structure of the contains function."]}],"name":"Lists / Strings / Recursion"}
