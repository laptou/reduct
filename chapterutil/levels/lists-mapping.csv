board,goal,textgoal,toolbox,defines,globals,syntax,animationScales,tutorialUrl
"['[[""Amy"", ""happy""], [""Tony"", ""sad""], [""Eric"", ""happy""], [""Michelle"", ""sad""]]','function updateExcited(pair) { return  _; }','function makeAllExcited(list) { return  ((list) == ([])) ? ([]) : (_); }','makeAllExcited','updatePair','""excited""','pair']","['[[""Amy"", ""excited""], [""Tony"", ""excited""], [""Eric"", ""excited""], [""Michelle"", ""excited""]]']",Make EVERYONE excited. Update the list!,"['__unlimited; tail','__unlimited; head','__unlimited; list','cons','updateExcited']",,{},[],{},
"['[[""Amy"", ""happy""], [""Tony"", ""sad""], [""Eric"", ""happy""], [""Michelle"", ""sad""]]', 'function updateExcited(pair) {return updatePair(pair, ""excited"");}', 'map(updateExcited, _)']","['[[""Amy"", ""excited""], [""Tony"", ""excited""], [""Eric"", ""excited""], [""Michelle"", ""excited""]]']",Make everyone excited. Even faster!,[],"['function updateExcited(pair) {return updatePair(pair, ""excited"");}']",{},[],{},
"['[1,2,3,4,5]', 'map', 'addOne']","['[2,3,4,5,6]']","Map takes in a function, and applies it to every element in the list. Try it!",[],,{},[],{},
"['[[""Amy"", ""happy""], [""Tony"", ""sad""], [""Eric"", ""happy""], [""Michelle"", ""sad""]]', 'function makeAllExcited(list) {return _;}', 'map', 'makeAllExcited', 'list']","['[[""Amy"", ""excited""], [""Tony"", ""excited""], [""Eric"", ""excited""], [""Michelle"", ""excited""]]']","Now, let's make everyone excited using map!","['updatePair', 'updateExcited', '""excited""']",,{},[],{},
"['[[""Amy"", ""happy""], [""Tony"", ""sad""], [""Eric"", ""happy""], [""Michelle"", ""sad""]]', 'function sadToExcited(pair) {return _ == _ ? _ : _;}', 'map', 'sadToExcited']","['[[""Amy"", ""happy""], [""Tony"", ""excited""], [""Eric"", ""happy""], [""Michelle"", ""excited""]]']",Make the sad people excited!,"['__unlimited; updatePair', '""excited""', '""sad""', '""happy""', '__unlimited; tail', '__unlimited; head', '__unlimited; pair', '__unlimited; list', 'getValue']",,{},[],{},
"['[""Amy"", ""Tony"",""Eric"", ""Michelle""]', 'createPair(_, _)', '""happy""', 'function assignHappy(name) {return _;}', 'map', 'assignHappy', 'name']","['[[""Amy"", ""happy""], [""Tony"", ""happy""], [""Eric"", ""happy""], [""Michelle"", ""happy""]]']",Use map to create a list of pairs!,"['__unlimited; list', 'key']",,{},[],{},
"['[[""Amy"", ""happy""], [""Tony"", ""sad""], [""Eric"", ""happy""], [""Michelle"", ""sad""]]', 'function pairToSentence(pair) {return _ + "" is "" + getValue(_);}', 'function makeSentence(list) {return _;}', 'pair', 'pair', 'makeSentence', 'map', 'pairToSentence', 'list']","['[""Amy is happy"", ""Tony is sad"", ""Eric is happy"", ""Michelle is sad""]']",Write full sentences with the info you know.,"['getKey', 'getValue']",,{},[],{},
"['[1,3,5]', 'function add(a,b) {return a+b;}', 'fold(add, _, 0)']",['9'],Fold applies a function to every element in the list while 'combining' the results,[],"['function add(a,b) {return a+b;}']",{},[],{},
"['function myfold(func, list, accumulator) { return list == [] ? accumulator : (myfold(func, tail(list), ((func)(head(list), accumulator)) )) ;}', 'myfold(add, [1,2,3], 0)']",['6'],Let's dig into the body of the function fold,[],,{},[],{},
"['function myfold(func, list, accumulator) { return _ == _ ? _ : (myfold(func, _, ((func)(_, _)) )) ;}', '[]', 'accumulator', '[1,2,3]', 'myfold(add, _, 0)', 'accumulator']",['6'],"Now, let's try and build fold ourselves!","['__unlimited; list', '__unlimited; head', '__unlimited; tail']","['function myfold(func, list, accumulator) { return list == [] ? accumulator : (myfold(func, tail(list), ((func)(head(list), accumulator)) )) ;}']",{},[],{},
"['[[""Lebron James"", [25, 20, 28]], [""Anthony Davis"", [34, 32, 31]], [""Kyle Kuzuma"", [8, 23, 17]], [""JaVale McGee"", [10, 15, 14]], [""Danny Green"", [11, 14, 19]]]', 'myfold(addFirstScore, _, _)', 'function addFirstScore(playerPair, acc) {return _ + get(_, _);}', 'getValue', 'playerPair', 'acc']",['88'],The list contains the points each player gained during the first 3 games (in order). Use fold and calculate how many points they gained in total for the first game.,['__unlimited; 0'],,{},[],{},
"['[[""Lebron James"", [25, 20, 28]], [""Anthony Davis"", [34, 32, 31]], [""Kyle Kuzuma"", [8, 23, 17]], [""JaVale McGee"", [10, 15, 14]], [""Danny Green"", [11, 14, 19]]]', 'myfold(add, _, _)', 'map(getSecondScore, _)', 'function getSecondScore(playerPair) {return _;}', 'get', 'getValue', 'playerPair']",['104'],"We can also use map to extract all the scores first, then apply fold.","['0', '1']",,{},[],{},
"['[[""Lebron James"", [25, 20, 28]], [""Anthony Davis"", [34, 32, 31]], [""Kyle Kuzuma"", [8, 23, 17]], [""JaVale McGee"", [10, 15, 14]], [""Danny Green"", [11, 14, 19]]]', 'map(getPoints, _)', 'function getPoints(playerPair) {return _;}', 'function getGameScore(gameIndex, list) {return myfold(add, _, _);}', 'get', 'getValue', 'playerPair']",['109'],Try and generalize so that the user can pick which game to sum the points up.,"['0', '2', '__unlimited; gameIndex', 'getGameScore', '__unlimited; list']",,{},[],{},