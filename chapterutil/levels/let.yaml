levels:
  - board:
      - '__let(x, _, () => x + x)'
    goal:
      - '4'
    toolbox:
      - '2'
      - '3'
      - '5'
    defines: []
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '__let(x, _, () => __let(x, x + x, () => x + x))'
    goal:
      - '4'
    toolbox:
      - '1'
      - '2'
      - '3'
      - '4'
    defines: []
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '__let(f, _, () => f(3)(4) + f(4)(3))'
    goal:
      - '0'
    toolbox:
      - x => y => x + y
      - x => y => x - y
    defines: []
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '__let(x, _, () => __let(y, _, () => x == y))'
    goal:
      - 'false'
    toolbox:
      - 'false'
      - 'true'
      - 'false'
      - 'true'
    defines: []
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - >-
        __let(x, _, () => __let(y, _, () => (function countUpTo(x, n) { return x
        == _ ? x : countUpTo(x + 1, n); })))
    goal:
      - '5'
    toolbox:
      - countUpTo
      - '10'
      - '5'
      - '1'
      - 'n'
    defines: []
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
