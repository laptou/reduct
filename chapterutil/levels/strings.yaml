levels:
  - board:
      - 'function concatStrings(a,b) { return  (a) + (b); }'
      - '"Computer"'
    goal:
      - '"ComputerScience"'
    toolbox:
      - concatStrings
      - '"Science"'
    defines: []
    textGoal: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '"coffee"'
      - '"chocolates"'
      - >-
        function reverseString(str) {return str == "" ? "" :
        reverseString(slice(str,1, length(str))) + get(str,0);}
    goal:
      - '"eeffocsetalocohc"'
    toolbox:
      - reverseString
      - (_) + (_)
    defines:
      - >-
        function reverseString(str) {return str == "" ? "" : (x =>
        reverseString(slice(str,1, length(str))) + x)(get(str,0));}
    textGoal: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - >-
        function checkPalindrome(str) { return  ((str) == (_)) ? (true) :
        (false); }
      - '"ababa"'
      - '"abcd"'
      - str
    goal:
      - 'true'
      - 'false'
    toolbox:
      - reverseString
      - __unlimited;checkPalindrome
    defines: []
    textGoal: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide:
        - reverseString
    autograder:
      inputs: []
      outputs: []
  - board:
      - '"ooooompalooooompa"'
      - '"ooooompalooooompa"'
      - >-
        function countAs(str,char,counter) { return  ((str) == ("")) ? (counter)
        : (((get(str, 0)) == (char)) ? (countAs(slice(str, 1, length(str)),
        char, (counter) + (1))) : (countAs(slice(str, 1, length(str)), char,
        counter))); }
    goal:
      - '10'
      - '2'
    toolbox:
      - __unlimited;countAs
      - __unlimited;0
      - __unlimited;1
      - '"o"'
      - '"m"'
      - '"p"'
      - '"a"'
      - '"l"'
    defines: []
    textGoal: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
