board,goal,textgoal,toolbox,defines,globals,syntax,animationScales,comments
"['function count(list) {isEmpty(list) ? 0 : 1 + count(tail(list))}']","['1','3','0','4']","The count() function counts the number of items in a list.","['__unlimited; count','[1,3,5]','[]','[5]','[13,4,6,2]']","['function count(list) {list == [] ? 0 : 1 + count(tail(list))}']",{},{}
"['count','count']","['3','2']","Which lists will give 3 and 2?","['[]','[""star""]','[""star"",""rect""]','[""star"",""triangle"",""rect""]']",{},{}
"['[""list"",""of"",""words""]','[""list"",""of"",""words""]']","['2','4']","Let's change the sizes of our lists.","['cons','tail','count','count','""anything""']",{},{}
"['count(tail(list))','count([head(list)])','(list => (_ + _))(_)']","['2']","Let's get the size of our list.","['[""head"",""tail""]']",{},{}
"['[true,false,false,true]','[100,4,6,2]','(_) + (_)']","['103']","Reach the goal using the functions in the toolbox.","['head','tail','count']",{},{}
"['[10]','[5,2]']","['[2,1]']","Use count function to create new numbers and build a list","['__unlimited; cons','[]','(_) + (_)','count','count']",{},{}
"['(_) < (_)','function isASmallList(list) { return  _; }']","['true','true','false']","Build the smallList function to count how many items are smaller than 3.","['count','[1,5]','3','[]','list','[1,2,4,3]','__unlimited; isASmallList']",{},{}
"['[5,4,3,2,1]','[1,2,3,4,5,6,7]','function my_count(list) { return  _; }', 'my_count', '(_) ? (_) : (_)']","['5','7']","Using all that you've seen, let's try building our own count function.","['isEmpty','0','1','(_) == (_)','(_) + (_)','__unlimited; list','tail','__unlimited; my_count']",{},{}
"['function countStars(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""star"")) ? ((_) + (countStars(tail(_)))) : (countStars(tail(_))))']","['1','1','2']","Let's only count how many specific items are in a list.","['0','1','__unlimited; list','[""star""]','[""star"",""rect"",""triangle""]','[""star"",""rect"",""star""]','__unlimited; countStars']",{},{}
"['function countHappy(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""😃"")) ? ((_) + (countHappy(tail(_)))) : (countHappy(tail(_))))']","['0','1','3']","Let's only count how happy faces are in a list.","['0','1','__unlimited; list','[""😡""]','[""😃"",""😿"",""🥶""]','[""😃"",""😃"",""😃""]','__unlimited; countHappy']",{},{}
"['function countMonkeys(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""🐒"")) ? ((_) + (countMonkeys(tail(_)))) : (countMonkeys(tail(_))))']","['0','1','0']","Let's only count how monkeys are in a list.","['0','1','__unlimited; list','[""🦆""]','[""🐫"",""🐳"",""🐒""]','[""🐧"",""🦁"",""🐶""]','__unlimited; countMonkeys']",{},{}
"['function countCondition(list,cond) { return  (isEmpty) ? (_) : (((cond)(_)) ? ((_) + (countCondition(_, cond))) : countCondition(_, cond)); }','countCondition([""😃"",""😡"",""😃""], (x) => (x) == (""😃""))','countCondition([""🐫"",""🐳"",""🐒""], (x) => (x) == (""🐒""))']","['1','2']","Let's wrapped what we've done in a single function. We can count an item in a list only when a condition is true.","['list','head(list)','__unlimited; tail(list)','0','1']","['function countCondition(list, cond) { isEmpty(list) ? 0 : (cond(head(list))) ? 1 + countCondition(tail(list), cond) : countCondition(tail(list), cond) }']",{},{}
"['(x) => (x) == (0)','countCondition']","['2']","Use the functions on lists to reach the goal.","['[0,4,5,0,0]','cons','head','tail']",{},{}