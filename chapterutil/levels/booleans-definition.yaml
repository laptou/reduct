levels:
  - board:
      - 'function isTriangle(x) { return x == TRIANGLE; }'
      - '__tests(testMe(TRIANGLE), testMe(RECT))'
    goal:
      - 'true'
      - 'false'
    toolbox:
      - __unlimited; isTriangle;
    defines:
      - 'function isTriangle(x) { return x == TRIANGLE }'
    hint: ''
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function isStar(x) { return _; }'
      - '__tests(testMe(STAR), testMe(RECT), testMe(STAR))'
    goal:
      - 'true'
      - 'false'
      - 'true'
    toolbox:
      - __unlimited; isStar;
      - x == _
      - TRIANGLE
      - RECT
      - STAR
    defines:
      - 'function isStar(x) { return x == ''STAR''; }'
    hint: 'Define a function that outputs true if x is {a star}, otherwise false'
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '__argumentAnnotated; function isZero(x) { return _; }'
      - _ == _
      - '__tests(testMe(1), testMe(0), testMe(3), testMe(0))'
    goal:
      - 'false'
      - 'true'
      - 'false'
      - 'true'
    toolbox:
      - __unlimited; isZero;
      - (x) => _
      - x
      - 'y'
      - '0'
      - '1'
      - '2'
    defines:
      - 'function isZero(x) { return x == 0; }'
    hint: 'Define a function that outputs true if x is 0, otherwise false'
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function add(x,y) { return (_ + _); }'
      - x
    goal:
      - '6'
      - '9'
    toolbox:
      - '0'
      - '1'
      - '2'
      - '4'
      - '8'
      - x
      - 'y'
      - __unlimited; add;
    defines: []
    hint: Define a function that adds two numbers
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function equals(x, y) { return _; }'
      - _ == _
      - '__tests(testMe(1, 2), testMe(2, 2), testMe(3, 3))'
      - 'y'
      - x
    goal:
      - 'false'
      - 'true'
      - 'true'
    toolbox:
      - __unlimited; equals;
      - '0'
      - '1'
    defines: []
    hint: 'Define a function that outputs true if x and y are equal, otherwise false'
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '__argumentAnnotated; function equals(x, y) { return _; }'
      - _ == _
      - (y) => _
      - '__tests(testMe(3, 4), testMe(5, 5), testMe(4, 3))'
    goal:
      - 'false'
      - 'true'
      - 'false'
    toolbox:
      - __unlimited; equals;
      - (x) => _
      - x
      - 'y'
      - '0'
      - '1'
    defines:
      - 'function equals(x, y) { return x == y; }'
    hint: 'Define a function that outputs true if x and y are equal, otherwise false'
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function starIs1(x) { return _ ? 1 : 0; }'
      - x == _
      - '__tests(testMe(RECT), testMe(STAR), testMe(TRIANGLE))'
    goal:
      - '0'
      - '1'
      - '0'
    toolbox:
      - __unlimited; starIs1;
      - STAR
      - RECT
      - TRIANGLE
    defines: []
    hint: 'Define a function that outputs 1 if x is {a star}'
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function alwaysOne(x) { return _; }'
      - '_ ? x : 1'
      - '__tests(testMe(1), testMe(2), testMe(3))'
      - 1 == _
      - x
    goal:
      - '1'
      - '1'
      - '1'
    toolbox:
      - __unlimited; alwaysOne;
      - _ == _
      - '2'
      - '3'
    defines:
      - 'function alwaysOne(x) { return x == 1 ? x : 1; }'
    hint: Define a function that always outputs 1
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - 'function firstNonZero(x, y) { return _; }'
      - '_ ? _ : x'
      - '__tests(testMe(1, 2), testMe(0, 1), testMe(2, 0), testMe(3, 2))'
    goal:
      - '1'
      - '1'
      - '2'
      - '3'
    toolbox:
      - __unlimited;isZero;
      - '__unlimited; firstNonZero; '
      - x
      - 'y'
      - x
      - 'y'
      - __unlimited; _(_)
    defines:
      - 'function firstNonZero(x, y) { return x == 0 ? x : y; }'
    hint: Define a function that outputs x if it is non zero and y otherwise
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
