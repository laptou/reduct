board,goal,textgoal,toolbox,defines,globals,syntax,animationScales
"['mon == mon', '_ == tue']","['true', 'false']",,"['tue', 'sat', 'sun']",,{},[],{}
"['function isSameDay(x, y) { return _; }', '_ == _', '__tests(test_me(sat, sat) == true, test_me(mon, tue) == false)']","['true', 'true']","Define a function that outputs true if the x and y are the same weekday, otherwise false","['x', 'x', 'y', 'y', '__unlimited; isSameDay;']",,{},[],{}
"['function isMonday(x) {return _; }', '__tests(test_me(mon), test_me(tue))']","['true', 'false']","Define a function that outputs true if x is Monday, otherwise false","['x == _', 'mon', 'tue', '__unlimited; isMonday;']",['function isMonday(x) { return x == mon }'],{},[],{}
"['function isFriday(x) {return _; }', '__tests(test_me(mon), test_me(fri))']","['false', 'true']","Define a function that outputs true if x is Friday, otherwise false","['_ == _', 'x', 'mon', 'tue', 'fri', 'sat', '__unlimited; isFriday;']",['function isFriday(x) { return x == fri }'],{},[],{}
"['function isMondayOrFriday(x) {return _; }', 'isMonday(_) ? _ : _', 'x', '__tests(test_me(mon), test_me(tue), test_me(fri), test_me(sun))']","['true', 'true', 'false', 'false']","Define a function that outputs true if x is Monday or Friday, otherwise false","['isMonday', 'isFriday', 'mon', 'tue', 'true', 'false', 'x', '__unlimited; isMondayOrFriday;']",,{},[],{}
"['function isWeekend(x) {return _; }', '_ ? _ : _', 'x == _', '__tests(test_me(sat), test_me(tue), test_me(mon), test_me(sun))']","['true', 'false', 'false', 'true']","Define a function that outputs true if x is the weekend, otherwise false","['sat', 'sun', 'mon', 'tue', 'true', 'false', 'x', '_ == _', '__unlimited; isWeekend;']",['function isWeekend(x) { return x == sat ? true : x == sun }'],{},[],{}
"['function isWeekday(x) {return _; }', '_ ? _ : _', '__tests(test_me(sat), test_me(tue), test_me(mon), test_me(sun))']","['false', 'true', 'true', 'false']","Define a function that outputs true if x is one of the weekdays, otherwise false","['isWeekend', 'sat', 'sun', 'mon', 'tue', 'true', 'false', 'x', '_ == _', '__unlimited; isWeekday;']",['function isWeekday(x) { return isWeekend(x) ? false : true }'],{},[],{}
"['function tomorrow(day) {return _;}', '{ day == mon ? tue : (day == tue ? wed : (day == wed ? thu : (day == thu ? fri : (day == fri ? sat : (day == sat ? sun : mon))))); }'] ","['tue', 'sun']",Define the function tomorrow to compute the next day of any given day,"['mon', 'wed', 'tue', 'thu','sat','__unlimited; tomorrow;']",,{},[],{}
"['function yesterday(day) {return _;}', 'day == mon ? sun : (day == tue ? mon : (day == wed ? tue : (day == thu ? wed : (day == fri ? thu : (day == sat ? fri : sat))))); }'] ","['tue', 'sun']",Define the function tomorrow to compute the previous day of any given day,"['mon', 'wed', 'tue', 'thu','sat','__unlimited; yesterday;']",,{},[],{}
"['tomorrow(_)', 'yesterday(_)']","['tue', 'tue']",,"['mon', 'wed', 'tue', 'thu']","['function tomorrow(x) { return x == mon ? tue : (x == tue ? wed : (x == wed ? thu : (x == thu ? fri : (x == fri ? sat : (x == sat ? sun : mon))))); }', 'function yesterday(x) { return x == mon ? sun : (x == tue ? mon : (x == wed ? tue : (x == thu ? wed : (x == fri ? thu : (x == sat ? fri : sat))))); }']","{'tomorrow': 'function tomorrow(x) { return x == mon ? tue : (x == tue ? wed : (x == wed ? thu : (x == thu ? fri : (x == fri ? sat : (x == sat ? sun : mon))))); }', 'yesterday': 'function yesterday(x) { return x == mon ? sun : (x == tue ? mon : (x == wed ? tue : (x == thu ? wed : (x == fri ? thu : (x == sat ? fri : sat))))); }'}",[],{}