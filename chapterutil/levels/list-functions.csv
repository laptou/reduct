board,goal,textgoal,toolbox,defines,globals,syntax,animationScales,comments
"['function isEmpty(list) { return  (length(list)) == (0); }']","['false','true','true']","We can see if a list has no items with the isEmpty function.","['[]','[]','[0,1,2,3]','__unlimited; isEmpty']","['function isEmpty(list) { return  (length(list)) == (0); }']",{},{}
"['function head(list) { return  get(list, 0); }']","['1','1','1','2']","We can use the head function to get the first item in a list.","['[1]','[2]','[1,2]','[1,2,3,4]','__unlimited; head']","['function head(list) { return get(list, 0); }']",{},{}
"['function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']","['[]','[]','[2]','[2,3,4]']", "We can use the tail function to get everything except the head.","['[1]','[2]','[1,2]','[1,2,3,4]','__unlimited; tail']","['function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']",{},{}
"[]","['0','1','2']","We can access every item in a list by using just the head and tail functions.","['__unlimited; head','__unlimited; tail','__unlimited; [0,1,2]']",{},{}
"['function cons(item,list) { return concat([item], list); }','[2,3]','[""rect""]']","['[1,2,3]','[""star"", ""rect""]']","We can add new items into an old list using the cons function to build a new list. Try building the lists below.","['__unlimited; cons','1','""star""']","['function cons(item,list) { return  concat([item], list); }']",{},{}
"['1','7','0','3']","['[1,3,0,7]']","Build a the list below starting with an empty list using the cons function.","['__unlimited; cons','[]','__unlimited; head','__unlimited; tail']",{},{}
"['[1,4,2]']","['[1,9,5]']","Try to build the list below.","['[9,5]','cons','tail','head','[5,9]']",{},{}
"['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']","['[4,3,2,1]','[""🍽"",""🚽"",""💩""]']","We can reverse lists using the reverse() function.","['[1,2,3,4]', 'reverse', 'reverse', '[""💩"",""🚽"",""🍽""]']","['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']",{},{} 
"['[1,2,3]','10']","['[1,2,3,10]']","We can add a value to the end of a list by using reverse() and cons().","['reverse','reverse','cons']",{},{}
"['function addToEnd(item, list) { return  _; }']","['[1,2,3,4,5]']","Great! Now that we can add an item to the end of a list, let's wrap that up as a function called addToEnd().","['__unlimited; reverse','cons','item','list','addToEnd','5','[1,2,3,4]']",{},{}
"['reverse','[4,2,7]','[4,2]']","['[2,4,7,2,4]']","Let's try out the functions you've now seen to reach the goal.","['tail','head','4','cons','cons']",{},{}
"['function count(list) {isEmpty(list) ? 0 : 1 + count(tail(list))}']","['1','3','0','4']","The count() function counts the number of items in a list.","['__unlimited; count','[1,3,5]','[]','[5]','[13,4,6,2]']","['function count(list) {list == [] ? 0 : 1 + count(tail(list))}']",{},{}
"['count','count']","['3','2']","Which lists will give 3 and 2?","['[]','[""star""]','[""star"",""rect""]','[""star"",""triangle"",""rect""]']",{},{}
"['[""list"",""of"",""words""]','[""list"",""of"",""words""]']","['2','4']","Let's change the sizes of our lists.","['cons','tail','count','count','""anything""']",{},{}
"['count(tail(list))','count([head(list)])','(list => (_ + _))(_)']","['2']","Let's get the size of our list.","['[""head"",""tail""]']",{},{}
"['[true,false,false,true]','[100,4,6,2]','(_) + (_)']","['103']","Reach the goal using the functions in the toolbox.","['head','tail','count']",{},{}
"['[10]','[5,2]']","['[2,1]']","Use count function to create new numbers and build a list","['__unlimited; cons','[]','(_) + (_)','count','count']",{},{}
"['(_) < (_)','function isASmallList(list) { return  _; }']","['true','true','false']","Build the smallList function to count how many items are smaller than 3.","['count','[1,5]','3','[]','list','[1,2,4,3]','__unlimited; isASmallList']",{},{}
"['[5,4,3,2,1]','[1,2,3,4,5,6,7]','function my_count(list) { return  _; }', 'my_count', '(_) ? (_) : (_)']","['5','7']","Using all that you've seen, let's try building our own count function.","['isEmpty','0','1','(_) == (_)','(_) + (_)','__unlimited; list','tail','__unlimited; my_count']",{},{}
"['function countStars(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""star"")) ? ((_) + (countStars(tail(_)))) : (countStars(tail(_))))']","['1','1','2']","Let's only count how many specific items are in a list.","['0','1','__unlimited; list','[""star""]','[""star"",""rect"",""triangle""]','[""star"",""rect"",""star""]','__unlimited; countStars']",{},{}
"['function countHappy(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""😃"")) ? ((_) + (countHappy(tail(_)))) : (countHappy(tail(_))))']","['0','1','3']","Let's only count how happy faces are in a list.","['0','1','__unlimited; list','[""😡""]','[""😃"",""😿"",""🥶""]','[""😃"",""😃"",""😃""]','__unlimited; countHappy']",{},{}
"['function countMonkeys(list) { return  _; }','(isEmpty) ? (_) : (((head) == (""🐒"")) ? ((_) + (countMonkeys(tail(_)))) : (countMonkeys(tail(_))))']","['0','1','0']","Let's only count how monkeys are in a list.","['0','1','__unlimited; list','[""🦆""]','[""🐫"",""🐳"",""🐒""]','[""🐧"",""🦁"",""🐶""]','__unlimited; countMonkeys']",{},{}
"['function countCondition(list,cond) { return  (isEmpty) ? (_) : (((cond)(_)) ? ((_) + (countCondition(_, cond))) : countCondition(_, cond)); }','countCondition([""😃"",""😡"",""😃""], (x) => (x) == (""😃""))','countCondition([""🐫"",""🐳"",""🐒""], (x) => (x) == (""🐒""))']","['1','2']","Let's wrapped what we've done in a single function. We can count an item in a list only when a condition is true.","['list','head(list)','__unlimited; tail(list)','0','1']","['function countCondition(list, cond) { isEmpty(list) ? 0 : (cond(head(list))) ? 1 + countCondition(tail(list), cond) : countCondition(tail(list), cond) }']",{},{}
"['(x) => (x) == (0)','countCondition']","['2']","Use the functions on lists to reach the goal.","['[0,4,5,0,0]','cons','head','tail']",{},{}
"['function filter(list,f) { return  (isEmpty(list)) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }','(e) => (e) == (1)','(e) => (e) > (1)','(e) => (e) > (5)']","['[1]','[2,3,4]','[]']","We can use a filter function that only keeps items that makes a condition true. Check it out!","['__unlimited; [1,2,3,4]','__unlimited; filter']","['function filter(list,f) { return  ((list) == ([])) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }']",{},{}
"['filter','filter','num','function biggerThanZero(num) { return  _; }']","['[]','[3,2,1]']","Let's try keeping all the items that are bigger than zero in the Lists","['(_) > (0)','__unlimited; biggerThanZero','[0,3,2,1]','[0,0,0,0]']",{},{}
"['function keepTrue(list) { return  _; }','(x) => _','[false,false,false,true]','[false,false,true,false]','[false]']","['[]','[true]','[true]']","Like before, let's keep only the True items in the Lists. Can you build a new function that uses filter?","['x','filter','list','__unlimited; keepTrue','(_) == (true)']",{},{}
"['function removeFace(list,face){ return _;}','list','""😭""','""😁""','[""😁"",""😭"",""😭"",""😁"",""😁"",""😭""]']","['[]']","We can also use filter to remove a specific item from the list","['face','__unlimited; removeFace','x => !(x == _)','filter']",{},{}
"['function my_filter(list,f) { return  _; }','[]','(isEmpty(list)) ? (_) : (((f)(_)) ? (cons(_, my_filter(_, f))) : (my_filter(_, f)))']","['[2]']","Now, let's trying completing our own filter function.","['__unlimited; my_filter','(e) => (e) == (2)','__unlimited; head(list)','__unlimited; tail(list)','[1,2,3]']",{},{}
"[]","[]","play","['addOne']","['function fold(f, a, i) { return 0;}']",{},{}