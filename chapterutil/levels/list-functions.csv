board,goal,textgoal,toolbox,defines,globals,syntax,animationScales,,tutorialUrl,comments
"['function isEmpty(list) { return  (length(list)) == (0); }']","['false','true','true']","We can easily see if a list has no items with the isEmpty() function.","['[]','[]','[0,1,2,3]','__unlimited; isEmpty']","['function isEmpty(list) { return  (length(list)) == (0); }']",{},[],{}
"['function head(list) { return  get(list, 0); }']","['1','1','1','2']","We can use the head() function to get the first item in a list.","['[1]','[2]','[1,2]','[1,2,3,4]','__unlimited; head']","['function head(list) { return get(list, 0); }']",{},[],{}
"['function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']","['[]','[]','[2]','[2,3,4]']", "We can use the tail() function to get everything except the head.","['[1]','[2]','[1,2]','[1,2,3,4]','__unlimited; tail']","['function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']",{},[],{}
"[]","['0','1','2','3']","We can access every item in a list by using only head and tail functions.","['__unlimited; head','__unlimited; tail','__unlimited; [0,1,2,3]']",,{},[],{}
"['function cons(item,list) { return concat([item], list); }','[2,3]']","['[1,2,3]']","We can add new items into an old list using the cons() function to build a new list. Try building the list below.","['__unlimited; cons','1']","['function cons(item,list) { return  concat([item], list); }']",{},[],{}
"['[1,4,2]']","['[1,9,5]']","Cons adds an element to the head position of a list. Try to build the list below.","['[9,5]','cons','tail','head','[5,9]']",,{},[],{}
"['1','7','0','3','1']","['[1,1,3,0,7]']","Build a the list below starting with an empty list using the cons() function.","['__unlimited; cons','[]','__unlimited; head','__unlimited; tail']",,{},[],{}
"['function duplicate(list) { return concat(list, list); }','[1,2,3,4,5]']","['[1,2,3,4,5,1,2,3,4,5]']","Let's try duplicating a list and make it twice its size.","['duplicate']","['function duplicate(list) { return concat(list, list); }']",{},[],{}
"['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']","['[4,3,2,1]']","We can reverse a list using the reverse() function.","['[1,2,3,4]', 'reverse']","['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']",{},[],{} 
"['[1,2,3]','10']","['[1,2,3,10]']","We can add a value to the end of a list by using reverse() and cons().","['reverse','reverse','cons']",,{},[],{}
"['function addToEnd(item, list) { return  _; }']","['[1,2,3,4,5]']","Great! Now that we can add an item to the end of a list, let's wrap that up as a function called addToEnd().","['__unlimited; reverse','cons','item','list','addToEnd','5','[1,2,3,4]']",,{},[],{}
"['reverse','[4,2,7]']","['[2,4,7,2,4]']","Let's try out the functions you've now seen to reach the goal.","['duplicate','tail','head','5','cons']",,{},[],{}
"['function count(list) {isEmpty(list) ? 0 : 1 + count(tail(list))}']","['1','3','0','4']","The function count() is the number of items in a list. Don't worry. We'll go over the details one step at a time.","['__unlimited; count','[1,3,5]','[]','[5]','[13,4,6,2]']","['function count(list) {list == [] ? 0 : 1 + count(tail(list))}']",{},[],{}
"['(_) ? (_) : (_)']","['0']","If a list is empty, then there are 0 items. Otherwise, there are more than 0 items.","['isEmpty','(_) == (_)','0','1','[]']",,{},[],{}
"['[1,2,3,4]','count(tail)','(_) + (_)']","['4']","When the isn't empty, then there's 1 item for the head of the list. Afterward, we add 1 to the number of items in the tail of the list.","['0','1']",,{},[],{}
"['[true,false,false,true]','[100,4,6,2]','(_) + (_)']","['103']","Reach the goal using the count() function.","['head','tail','count']",,{},[],{}
"['[10]','[5,2]']","['[2,1]']","Use Count to Build a List","['__unlimited; cons','[]','(_) + (_)','count','count']",,{},[],{}
"['(_) < (_)','function smallList(list) { return  _; }']","['true','true','false']","Compare the sizes of lists","['count','[1,5]','3','[]','list','[1,2,4,3]','__unlimited; tooSmall']",,{},[],{}
"['2','[]','cons']","['8']","Powers of Twos","['__unlimited; duplicate','count']",,{},[],{}
"['[5,4,3,2,1]','(_) == (_)','[]','[1,2,3,4,5,6,7]','function my_count(list) { return  _; }', 'my_count', '(_) ? (_) : (_)']","['5','7']","","['0','1','(_) == (_)','(_) + (_)','__unlimited; list','tail','__unlimited; my_count']",,{},[],{}
"['function countCondition(list,cond) { return  _; }','(_) == (_)','countCondition','countCondition','(_) ? (_) : (_)','(_) ? (_) : (_)','[]','(cond)(_)','countCondition([0,0,0,3,2], x => x == 0)','countCondition([3,6,8,9],x => x > 5)']","['3','3']","We can count only when a condition is true too. Let's build that function.","['__unlimited; list','__unlimited; head','__unlimited; cond','__unlimited; tail','0','0','1','(_) + (_)']","['function countCondition(list, cond) { head(list) == [] ? 0 : (cond(head(list))) ? 1 + countCondition(tail(list), cond) : countCondition(tail(list), cond) }']",{},[],{}
"['(x) => (x) == (0)','countCondition']","['3']","Use the functions on lists to reach the goal.","['[0,4,5,0]','cons','head','duplicate','tail']",,{},[],{}
"['function filter(list,f) { return  ((list) == ([])) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }','(e) => (e) == (1)','(e) => (e) > (1)','(e) => (e) > (5)']","['[1]','[2,3,4]','[]']","Introducing Filter","['__unlimited; [1,2,3,4]','__unlimited; filter']","['function filter(list,f) { return  ((list) == ([])) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }']",{},[],{}
"['filter','filter','num','function biggerThanZero(num) { return  _; }']","['[]','[3,2,1]']","Remove Zeros in Lists","['(_) > (0)','__unlimited; biggerThanZero','[0,3,2,1]','[0,0,0,0]']",,{},[],{}
"['function keepTrue(list) { return  _; }','(x) => _','[false,false,false,true]','[false,false,true,false]','[false]']","['[]','[true]','[true]']","Keep True Values in the Lists","['x','filter','list','__unlimited; keepTrue','(_) == (true)']",,{},[],{}
"['function removeNumber(list,num){ return _;}','list','3','12','[12,3,3,3,12,12,3]']","['[]']","Remove a Specific Number from List","['x','num','__unlimited; removeNumber','!(_ == _)','x => _','filter']",,{},[],{}
"['function my_filter(list,f) { return  _; }','[]','[]','cons','(_) ? (_) : (_)', 'my_filter','my_filter','(_) ? (_) : (_)','(f)(_)','(_) == (_)']","['[2]','[1,2,3]']","Build Filter","['__unlimited; f','__unlimited; list','__unlimited; my_filter','(e) => (e) == (e)','(e) => (e) == (2)','__unlimited; head','__unlimited; tail','__unlimited; [1,2,3]']",,{},[],{}
"[]","[]","play","['addOne']","['function fold(f, a, i) { return 0;}']",{},[],{}