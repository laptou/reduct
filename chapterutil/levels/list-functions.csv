board,goal,textgoal,toolbox,defines,globals,syntax,animationScales,,tutorial,comments
"['function head(list) {return get(list, 0);}', 'function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']","['1','[2,4,6]']",Head and Tail Introduction,"['__unlimited; [1,2,4,6]','head','tail']","['function head(list) { return get(list, 0); }', 'function tail(list) {length(list) == 1 ? [] : slice(list, 1, length(list)); }']",{},[],{}
"[]","['0','1','2']","Access Elements","['__unlimited; head','__unlimited; tail','__unlimited; [0,1,2,3]']",,{},[],{}
"['function cons(e,list) { return  concat([e], list); }','[]']","['[1,2,3]']","Build List","['__unlimited; cons','1','5','4','2','3']","['function cons(e,list) { return  concat([e], list); }']",{},[],{}
"['function duplicate(list) { return concat(list, list); }','[1,2,3,4,5]']","['[1,2,3,4,5,1,2,3,4,5]']","Demonstrate Duplicate","['duplicate']","['function duplicate(list) { return concat(list, list); }']",{},[],{}
"['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']","['[4,3,2,1]']","Reverse List","['[1,2,3,4]', 'reverse']","['function reverse(list) { (length(list) < 2) ? list : concat(reverse(tail(list)), [head(list)]) }']",{},[],{} 
"['function count(list) {list == [] ? 0 : 1 + count(tail(list))}']","['1','3','0']","Counting Function","['__unlimited; count','[1,3,5]','[]','[5]','[13,4,6,2]']","['function count(list) {list == [] ? 0 : 1 + count(tail(list))}']",{},[],{}
"['count','count','count','[100]','[2,6,3]','[2,4]','[2,4,6,7]','[]','count','count']","['10']","Adding Count Results","['__unlimited; add']",,{},[],{}
"['[10]','[5,2]']","['[2,1]']","Count to Build","['__unlimited; cons','[]','(_) + (_)','count','count']",,{},[],{}
"['(_) < (_)','function smallList(list) { return  _; }']","['true','true','false']","Compare Sizes","['count','[1,5]','3','[]','list','[1,2,4,3]','__unlimited; tooSmall']",,{},[],{}
"['2','[]','cons']","['8']","Powers of Two","['__unlimited; duplicate','count']",,{},[],{}
"['[5,4,3,2,1]','(_) == (_)','[]','[1,2,3,4,5,6,7]','function my_count(list) { return  _; }', 'my_count', '(_) ? (_) : (_)']","['5','7']","","['0','1','(_) == (_)','(_) + (_)','__unlimited; list','tail','__unlimited; my_count']",,{},[],{}
"['function filter(list,f) { return  ((list) == ([])) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }','(e) => (e) == (1)','(e) => (e) > (1)','(e) => (e) > (5)']","['[1]','[2,3,4]','[]']","Introducing Filter","['__unlimited; [1,2,3,4]','__unlimited; filter']","['function filter(list,f) { return  ((list) == ([])) ? ([]) : ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list), f))) : (filter(tail(list), f))); }']",{},[],{}
"['filter','filter','num','function biggerThanZero(num) { return  _; }']","['[]','[3,2,1]']","Remove Zeros in Lists","['(_) > (0)','__unlimited; biggerThanZero','[0,3,2,1]','[0,0,0,0]']",,{},[],{}
"['function keepTrue(list) { return  _; }','(x) => _','[false,false,false,true]','[false,false,true,false]','[false]']","['[]','[true]','[true]']","Keep True Values in the Lists","['x','filter','list','__unlimited; keepTrue','(_) == (true)']",,{},[],{}
"['function removeNumber(list,num){ return _;}','list','3','12','[12,3,3,3,12,12,3]']","['[]']","Remove a Specific Number from List","['x','num','__unlimited; removeNumber','!(_ == _)','x => _','filter']",,{},[],{}
"['function my_filter(list,f) { return  _; }','[]','[]','cons','(_) ? (_) : (_)', 'my_filter','my_filter','(_) ? (_) : (_)','(f)(_)','(_) == (_)']","['[2]','[1,2,3]']","Build Filter","['__unlimited; f','__unlimited; list','__unlimited; my_filter','(e) => (e) == (e)','(e) => (e) == (2)','__unlimited; head','__unlimited; tail','__unlimited; [1,2,3]']",,{},[],{}
"[]","[]","play","['addOne']","['function fold(f, a, i) { return 0;}']",{},[],{}