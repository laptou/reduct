board,goal,textgoal,,toolbox,defines,globals,syntax,animationScales,fade
"['twice(addOne)', '_(_)']",['7'],,"This is 86... Problem with scalling, arrow a reconfusing; everything is unfolded with is confusing; ALso about addOne having a hole is also very confusing; Lasy unfolding; Alpha renaming","['3', '4', '5', '6']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
['twice(_)'],['7'],,,"['addOne', 'addThree', '1', '5', '9']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['twice', '_(_)', 'x', 'function addTwo(x) { return _; }', '__tests(f(3), f(7), f(11))']","['5', '9', '13']",Define a function that computes x plus 2,,"['addTwo', 'addOne']",['function addTwo(x) { return (twice(addOne))(x); }'],{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['twice', '_(_)', 'x', 'function addFour(x) { return _; }', '__tests(f(1), f(f(5)))']","['5', '13']",Define a function that computes x plus 4,89: can we move directly to the left side when we define something.lasy expension of known terms,"['addFour', 'addTwo']","['function addFour(x) { return (twice(addTwo))(x); }', 'function repeat(n, f) { return (x) => n == 0 ? x : repeat(n - 1, f)(f(x)); }']",{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(2, addOne)']",['5'],Use the repeat function,90: a little bit too much because we have recursion and if in one level... Nice tail recusion... or use big steps,"['1', '2', '3', '4']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(_, addOne)', '_(_)']",['11'],,,"['3', '4', '5', '6']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(3, _)', '_(_)']",['8'],,,"['doNothing', 'addOne', 'addTwo', '0', '1', '2']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(_, _)', '_(_)', 'x', 'function addSix(x) { return _; }', '__tests(f(5), f(9))']","['11', '15']",Define a function that computes x plus 6,,"['addSix', 'addThree', 'addTwo', '1', '3', '5']","['function addSix(x) { return (repeat(3, addTwo))(x); }']",{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['__tests(f(_), f(_))']","['9', '12']",,,"['addSix', '1', '2', '3', '4', '5', '6']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(x)', '_(_)', 'x', 'addOne', 'function double(x) { return _; }', '__tests(f(4), f(5))']","['8', '10']",Define a function that computes x times 2,,['double'],,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['repeat(_, _)', '_(_)', 'x', 'x', 'function triple(x) { return _; }', '__tests(f(3), f(_))']","['6', '9']",Define a function that computes x times 3,96: we need an apply. See comment about the infinite stack of that. Adding the 2 in the text plock is not useful,"['addTwo', 'addOne', 'triple', '0', '1', '2', '3']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['__argumentAnnotated(func, num); function apply(func) { return _; }', '__tests(f(doNothing, 3), f(addSix, 3), f(addOne, 4))', '_(_)']","['3', '9', '5']",Define a function that applies func to an input,101: nice lasy expension... Also no deifnition for triple (unbound identifier),"['apply', 'num => _', 'func', 'num']",,{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
"['function addTogether(a, b) { return _; }', '__tests(f(_, _), f(_, _), f(1, 2))', 'repeat(_)', 'a', 'b', 'addOne']","['3', '8', '9']",Define a function that computes a plus b,102: addtogether why this name? Why do I have to add the argument to the tester.,"['addTogether', '_(_)', '_(_)', '2', '3', '5', '7']","['function addTogether(a, b) { return repeat(a, addOne)(b); }']",{'twice': 'function twice(f) { return (x) => f(f(x)); }'},[],{},{}
