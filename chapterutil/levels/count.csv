board,goal,textgoal,toolbox,defines,globals,syntax,animationScales
"['function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}', 'function count(a) {return (a == []) ? 0: count(remove_first(a)) + 1}', '[A, A, A, A]']",['4'],Let's count to 4,['count'],"['function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}']",{},[],{}
"['function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count(a) {return (a == _) ? _: count(remove_first(a)) + 1}']",['0'],Can you count a list with no items in it? ,"['count', 'remove_first', '0', '[]', '[]', '[A]']",,{},[],{}
"['function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}', 'function count(a) {return (a == []) ? 0: _ + _}']",['3'],Let's count to 3!,"['count', 'remove_first', '1', '[B, B, B]']",,{},[],{}
"['function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}', 'function count(a) {return (a == _) ? _ : _ + _}', 'count']",['4'],Can you count a mixed list,"['remove_first', 'count', '0', '1', 'a', '[A, B, C, A]']",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['3'],Can you count only one type of object? ,"['count_target', 'A', 'B', '[A, B, A, A]']","['function count_target(a, target) {(a == []_ ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(_ == _) ? _: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['0'],Let's count a list of 0!,"['count_target', 'A', 'B', '0', '1', '[]', '[]', 'a']",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? a: (_ == _) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['1'],Can you count to 1? ,"['count_target', 'first', 'remove_first', 'a', 'target', '[B, A, A]', 'B']",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? a: (first(a) == target) ? _ + _: count_target(remove_first(a), target)}']",['1'],Can we still count this list? ,"['first', 'remove_first', '0', '1', 'a', 'target', 'count_target', 'target', 'a', 'A', '[A, A, A]']",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? a: (first(a) == target) ? count_target(remove_first(a), target) + 1: _}']",['2'],Can you fill out the bottom part? ,"['0', '1', 'target', 'a', 'target', 'remove_first', 'first', 'count_target', 'B', '[B, A, B]', 'a']",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? a: _ == _) ? _ + _: _}']",['3'],Can you fill out the whole thing? ,"['_unlimited; first', '_unlimited; target', '_unlimited; a', '_unlimited; count_target', '_unlimited; remove_first', '_unlimited; 1', '_unlimited; 0', 'B', '[B, B, B, A]' ]",,{},[],{}
"['function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}', 'function count_target(a, target) {(a == []) ? a: _ == _) ? _ + _: _}']",['2'],Let's fill out the whole function!,"['_unlimited; first', '_unlimited; target', '_unlimited; a', '_unlimited; count_target', '_unlimited; remove_first', '_unlimited; 1', '_unlimited; 0', 'A', 'B', '[A, B, B, A]', '_unlimited; []']",,{},[],{}
"['function deep_count(a) {return (a == []) ? 0 : deep_count(remove_first(a)) + deep_count(first(a))}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['4'],Let's count a list inside of a list!,"['deep_count', '[A, B, [A, B]]']",['function deep_count(a) {return (a == []) ? 0 : deep_count(remove_first(a)) + deep_count(first(a))}'],{},[],{}
"['function deep_count(a) {return (_ == _) ? _ : deep_count(remove_first(a)) + deep_count(first(a))}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['0'],Let's count an empty list!,"['deep_count', 'a', '0', '[]', '1', '[A]', '[]']",,{},[],{}
"['function deep_count(a) {return (a == []) ? 0 : _ + deep_count(first(a))}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['3'],Can you count this list? ,"['deep_count', 'remove_first', 'deep_count', 'first', 'a', '[A, B, [A]]']",,{},[],{}
"['function deep_count(a) {return (a == []) ? 0 : deep_count(remove_first(a)) + _}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['2'],Let's count to 2!,"['deep_count', 'remove_first', 'deep_count', 'first', 'a', '[A, [B]]']",,{},[],{}
"['function deep_count(a) {return (a == []) ? 0 : _ + _}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['3'],Can you count to 3? ,"['_unlimited; deep_count', 'a', 'remove_first', 'first', 'a', '[A, [B]]']",,{},[],{}
"['function deep_count(a) {_ ? _ : _ + _}', 'function first(a) {return get(a,0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']",['4'],Can you fill out the whole thing? ,"['_unlimited; deep_count', '_unlimited; a', 'remove_first', 'first', '', '[]', '0', '1', '[A, B, [A, B]]']",,{},[],{}
"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a), target))}', 'function first(a) {return get(a, 0)}', 'function remove_first(a) {return length(a) < 2 ? []: slice(a, 1, length(a))}']","['[A, A, A]']",Can you remove something from this list? ,"['remove_value', 'B', '[A, B, A, A]']","['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a), target))}']",{},[],{}
"['function remove_value(a, target) {(_ == _) ? _: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a), target))}']",['[]'],What happens when you put in an empty list? ,"['remove_value', '_unlimited; []', '0', '1', 'a'] ",,{},[],{}
"['function remove_value(a, target) {(a == []) ? []: (_ == _) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a), target))}']","['[B, B, B]']",What do you want to remove? ,"['remove_value', 'remove_first', 'first', 'a', 'target', 'A', 'B', '[A, B, B, B]']",,{},[],{}
"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : concat([first(a)], remove_value(a), target))}']","['[A, A]']",What happens your first item is the target? ,"['_unlimited; remove_value', 'remove_first', 'target', 'first', 'a', 'concat', 'B', '[A, B, A, B]']",,{},[],{}
"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a), target): _ }']","['[B, B]']",What happens when your first item isn't the target? ,"['concat', '[first(a)]', 'first', '_unlimited; a', '_unlimited; remove_value', 'remove_first', 'target', 'A', '[A, A, B, B]']",,{},[],{}
"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : _}']","['[A, A, A]']",Can you fill out the entire bottom part? ,"['_unlimited; concat', '_unlimited; [first(a)]', '_unlimited; first', '_unlimited; a', '_unlimited; remove_value', '_unlimited; remove_first', '_unlimited; target', 'A', '[A, B, B, A, A]']",,{},[],{}
"['function remove_value(a, target) {(_ == _) ? _: (_ == _) ? _ : _}', '[A, B, A, A]', 'B']","['[A, A, A]']",Can you fill out the whole thing? ,"['_unlimited; concat', '_unlimited; [first(a)]', '_unlimited; first', '_unlimited; a', '_unlimited; remove_value', '_unlimited; remove_first', '_unlimited; target', '_unlimited; []', '_unlimited; 0']",,{},[],{}
