levels:
  - board:
      - 'function head(a) {return get(a,0);}'
      - '[STAR, RECT, TRIANGLE]'
    goal:
      - STAR
    toolbox:
      - head
    defines:
      - 'function head(a) {return get(a,0);}'
    textGoal: First allows you to get the first item in a list.
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - >-
        function removeFirst(a) {return length(a) < 2 ? []: slice(a, 1,
        length(a))}
      - '[STAR, STAR, RECT, STAR]'
    goal:
      - '[STAR, RECT, STAR]'
    toolbox:
      - removeHead
    defines:
      - >-
        function removeHead(a) {return length(a) < 2 ? []: slice(a, 1,
        length(a))}
    textGoal: Remove_first allows you to remove the first item in a list.
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '[1,3]'
      - '[1,3]'
      - '(firstNum) => (secondNum) => firstNum > secondNum ? firstNum : secondNum'
      - x => xx
    goal:
      - '3'
    toolbox:
      - get
      - '0'
      - '1'
    defines:
      - 'function head(list) { return get(list,0);}'
      - 'function tail(list) {return get(list,length(list)-1);}'
    textGoal: Get the maximum number from the list
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - >-
        function maximum(list) { return list == [] ? 0 : (head( _ ) > maximum( _
        )) ? head(list) : (maximum(removeFirst(list))); }
      - 'maximum([1,3])'
    goal:
      - '3'
    toolbox:
      - list
      - list
      - head
      - removeHead
    defines:
      - 'function head(list) { return get(list,0);}'
      - 'function tail(list) {return get(list,length(list)-1);}'
    textGoal: >-
      Here's a function that gets the maximum number of a list. Study it
      carefully.
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '[3,2,1,4,5]'
      - 'function minimum(list) {return _; }'
      - minimum
      - '_ == [] ? 100 : _'
      - '_ < _ ? _ : _'
      - minimum(_)
    goal:
      - '1'
    toolbox:
      - minimum
      - __unlimited; head
      - __unlimited; removeHead
      - __unlimited; list
    defines:
      - 'function head(list) { return get(list,0);}'
      - 'function tail(list) {return get(list,length(list)-1);}'
    textGoal: Define a function that returns the minimum number of the list.
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
  - board:
      - '[''STAR'', ''TRIANGLE'', ''RECT'']'
      - 'indexOf(_, _)'
      - >-
        function indexOf(list, value) { return _ == _ ? _ : (_ + indexOf(_ ,
        value)); }
      - '0'
      - '1'
      - head
      - removeHead
      - value
    goal:
      - '1'
    toolbox:
      - STAR
      - RECT
      - TRIANGLE
      - __unlimited; list
    defines:
      - 'function head(list) { return get(list,0);}'
      - 'function tail(list) {return get(list,length(list)-1);}'
    textGoal: Define a function that returns the index of the item in the list.
    note: null
    syntax: []
    globals:
      add: {}
      hide: []
    autograder:
      inputs: []
      outputs: []
