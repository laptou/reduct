board,goal,textgoal,toolbox,defines,globals,syntax,animationScales
"['[_,_,_,_,_]']","['[1,3,4,6,7]']","To warm up for sorting, let's add the numbers into the list. The order of the numbers is increasing from left to right.","['1','4','6','7','3']",['function isSorted(list) { return  ((count(list)) < (2)) ? (true) : (head(tail(list)) < (head(list))) ? (false) : (isSorted(tail(list))); }'],{},[],{}
"[]","['true','true','false']","These isSorted function tell us if a list is sorted (in increasing order). Try using the isSorted function with the 3 lists.","['[]','[1,4,5]','[4,3,2,1]','__unlimited; isSorted']",,{},[],{}
"['function my_isSorted(list) { return ((count(list)) < (2)) ? (true) : (first = _ in (second = _ in (((second) < (first)) ? (false) : (my_isSorted(tail(list)))))); }']","['true','true','true']","Let's try to fill in some of the gaps for the isSorted function. Get the first and second items of a list.","['tail(list)','list','head','head','[]','[1,4,6]','[100]','__unlimited; my_isSorted']",,{},[],{}
"['function my_isSorted(list) { return (_) < (_) ? (true) : (first = _ in (second = _ in (((second) < (first)) ? (false) : (my_isSorted(tail(list)))))); }']","['true','true','true']","If we only have a list with one or no elements, we don't have items to compare. So, we can easily say the list is sorted. Let's try to fill in some of the gaps for the isSorted function.","['head(tail(list))','head(list)','[]','[1,4,6]','[100]','__unlimited; my_isSorted','count', 'list','1','2']",,{},[],{}
"['function my_isSorted(list) { return (count(list)) < (2) ? (true) : (first = _ in (second = _ in (((_) < (_)) ? (false) : (my_isSorted(_))))); }']","['true','false','true','true']","To be sorted, the first number must be smaller than the second number. Let's try to fill in some of the gaps for the isSorted function.","['head(tail(list))','head(list)','[]','[1,4,6]','[3,2,1]','[100]','__unlimited; my_isSorted','tail(list)', 'second','first']",,{},[],{}
"['function my_isSorted(list) { return (_) < (_) ? (true) : (first = _ in (second = _ in (((_) < (_)) ? (false) : (_)))); }','my_isSorted(_)']","['true','false','true','true']","From what we've seen, let's build our isSorted function.","['count(list)','3','2','1','head(tail(list))','head(list)','[]','[1,4,6]','[3,5,1]','[100]','__unlimited; my_isSorted','tail(list)', 'second','first']",,{},[],{}
"['function remove(list,value) { return  (isEmpty(list)) ? ([]) : (((head(list)) == (value)) ? (tail(list)) : (cons(head(list), remove(tail(list), value)))); }']","['[4,6]','[0,5]','[13]']","Before we look at how to sort a list, we need one more function. This remove function removes one item from a list.","['__unlimited; remove','[4,6,2]','[0,5,2]','[13]','2','2','2']","['function remove(list,value) { return  (isEmpty(list)) ? ([]) : (((head(list)) == (value)) ? (tail(list)) : (cons(head(list), remove(tail(list), value)))); }','function sort(list) {return isSorted(list) ? list : (cons(min_num_list(list), sort(remove(list, min_num_list(list))))) }']",{},[],{}
"['[0,0]','[7,2,4]','[4,6,1]','[2,1,0]']","['[0,1,2]','[0,0]','[1,4,6]','[2,4,7]']","Let's use the sort function to sort all of these lists.","['__unlimited; sort']",,{},[],{}
"['function my_sort(list) {return isSorted(list) ? _ : (cons(min_num_list(list), my_sort(remove(list, min_num_list(list))))) }']","['[0,1,2]']","Let's look at the sort function in more detail. We first check if the list is sorted. If it's sorted, then we are done.","['[2,0,1]','my_sort','list']",,{},[],{}
"['function my_sort(list) {return isSorted(list) ? list : min = _ in (min_removed = _ in ((cons(min, my_sort(min_removed))))) }']","['[0,1,2]']","Let's look at the sort function in more detail. To sort, we can find the smallest number and put it into the front of the list.","['[2,0,1]','my_sort','min_num_list(list)','remove','min','list']",,{},[],{}
"['function my_sort(list) {return (_) ? _ : min = _ in (min_removed = _ in (_)) }','my_sort']","['[0,1,2]']","Let's try to complete the sort function from the ground up.","['[2,0,1]','my_sort','min_num_list(_)','remove','__unlimited; min','__unlimited; list','cons','isSorted','min_removed']",,{},[],{}