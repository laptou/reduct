board,goal,toolbox,defines,globals,textgoal,note
"[""function isTriangle(x) { return x == TRIANGLE; }"",""__tests(testMe(TRIANGLE), testMe(RECT))""]","[true,false]","[""__unlimited; isTriangle;""]","[""function isTriangle(x) { return x == TRIANGLE }""]",{},,
"[""function isStar(x) { return _; }"",""__tests(testMe(STAR), testMe(RECT), testMe(STAR))""]","[true,false,true]","[""__unlimited; isStar;"",""x == _"",""TRIANGLE"",""RECT"",""STAR""]","[""function isStar(x) { return x == 'STAR'; }""]",{},"Define a function that outputs true if x is {a star}, otherwise false",
"[""__argumentAnnotated; function isZero(x) { return _; }"",""_ == _"",""__tests(testMe(1), testMe(0), testMe(3), testMe(0))""]","[false,true,false,true]","[""__unlimited; isZero;"",""(x) => _"",""x"",""y"",0,1,2]","[""function isZero(x) { return x == 0; }""]",{},"Define a function that outputs true if x is 0, otherwise false",
"[""function add(x,y) { return (_ + _); }"",""x""]","[6,9]","[0,1,2,4,8,""x"",""y"",""__unlimited; add;""]",[],{},Define a function that adds two numbers,
"[""function equals(x, y) { return _; }"",""_ == _"",""__tests(testMe(1, 2), testMe(2, 2), testMe(3, 3))"",""y"",""x""]","[false,true,true]","[""__unlimited; equals;"",0,1]",[],{},"Define a function that outputs true if x and y are equal, otherwise false",
"[""__argumentAnnotated; function equals(x, y) { return _; }"",""_ == _"",""(y) => _"",""__tests(testMe(3, 4), testMe(5, 5), testMe(4, 3))""]","[false,true,false]","[""__unlimited; equals;"",""(x) => _"",""x"",""y"",0,1]","[""function equals(x, y) { return x == y; }""]",{},"Define a function that outputs true if x and y are equal, otherwise false",
"[""function starIs1(x) { return _ ? 1 : 0; }"",""x == _"",""__tests(testMe(RECT), testMe(STAR), testMe(TRIANGLE))""]","[0,1,0]","[""__unlimited; starIs1;"",""STAR"",""RECT"",""TRIANGLE""]",[],{},Define a function that outputs 1 if x is {a star},
"[""function alwaysOne(x) { return _; }"",""_ ? x : 1"",""__tests(testMe(1), testMe(2), testMe(3))"",1,""x""]","[1,1,1]","[""__unlimited; alwaysOne;"",""_ == _"",2,3]","[""function alwaysOne(x) { return x == 1 ? x : 1; }""]",{},Define a function that always outputs 1,
"[""function firstNonZero(x, y) { return _; }"",""_ ? _ : x"",""__tests(testMe(1, 2), testMe(0, 1), testMe(2, 0), testMe(3, 2))""]","[1,1,2,3]","[""__unlimited;isZero;"",""__unlimited; firstNonZero; "",""x"",""y"",""x"",""y"",""__unlimited; _(_)""]","[""function firstNonZero(x, y) { return x == 0 ? x : y; }""]",{},Define a function that outputs x if it is non zero and y otherwise ,
