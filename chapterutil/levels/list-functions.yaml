levels:
  - board:
      - 'function head(list) {return get(list, 0);}'
      - >-
        function tail(list) {length(list) == 1 ? [] : slice(list, 1,
        length(list)); }
    goal:
      - 1
      - '[2,4,6]'
    toolbox:
      - '__unlimited; [1,2,4,6]'
      - head
      - tail
    defines:
      - 'function head(list) { return get(list, 0); }'
      - >-
        function tail(list) {length(list) == 1 ? [] : slice(list, 1,
        length(list)); }
    globals: {}
    textgoal: Head and Tail Introduction
  - board: []
    goal:
      - 0
      - 1
      - 2
    toolbox:
      - __unlimited; head
      - __unlimited; tail
      - '__unlimited; [0,1,2,3]'
    defines: []
    globals: {}
    textgoal: Access Elements
  - board:
      - 'function cons(e,list) { return  concat([e], list); }'
      - '[]'
    goal:
      - '[1,2,3]'
    toolbox:
      - __unlimited; cons
      - 1
      - 5
      - 4
      - 2
      - 3
    defines:
      - 'function cons(e,list) { return  concat([e], list); }'
    globals: {}
    textgoal: Build List
  - board:
      - 'function duplicate(list) { return concat(list, list); }'
      - '[1,2,3,4,5]'
    goal:
      - '[1,2,3,4,5,1,2,3,4,5]'
    toolbox:
      - duplicate
    defines:
      - 'function duplicate(list) { return concat(list, list); }'
    globals: {}
    textgoal: Demonstrate Duplicate
  - board:
      - >-
        function reverse(list) { (length(list) < 2) ? list :
        concat(reverse(tail(list)), [head(list)]) }
    goal:
      - '[4,3,2,1]'
    toolbox:
      - '[1,2,3,4]'
      - reverse
    defines:
      - >-
        function reverse(list) { (length(list) < 2) ? list :
        concat(reverse(tail(list)), [head(list)]) }
    globals: {}
    textgoal: Reverse List
  - board:
      - 'function count(list) {list == [] ? 0 : 1 + count(tail(list))}'
    goal:
      - 1
      - 3
      - 0
    toolbox:
      - __unlimited; count
      - '[1,3,5]'
      - '[]'
      - '[5]'
      - '[13,4,6,2]'
    defines:
      - 'function count(list) {list == [] ? 0 : 1 + count(tail(list))}'
    globals: {}
    textgoal: Counting Function
  - board:
      - count
      - count
      - count
      - '[100]'
      - '[2,6,3]'
      - '[2,4]'
      - '[2,4,6,7]'
      - '[]'
      - count
      - count
    goal:
      - 10
    toolbox:
      - __unlimited; add
    defines: []
    globals: {}
    textgoal: Adding Count Results
  - board:
      - '[10]'
      - '[5,2]'
    goal:
      - '[2,1]'
    toolbox:
      - __unlimited; cons
      - '[]'
      - (_) + (_)
      - count
      - count
    defines: []
    globals: {}
    textgoal: Count to Build
  - board:
      - (_) < (_)
      - 'function smallList(list) { return  _; }'
    goal:
      - true
      - true
      - false
    toolbox:
      - count
      - '[1,5]'
      - 3
      - '[]'
      - list
      - '[1,2,4,3]'
      - __unlimited; tooSmall
    defines: []
    globals: {}
    textgoal: Compare Sizes
  - board:
      - 2
      - '[]'
      - cons
    goal:
      - 8
    toolbox:
      - __unlimited; duplicate
      - count
    defines: []
    globals: {}
    textgoal: Powers of Two
  - board:
      - '[5,4,3,2,1]'
      - (_) == (_)
      - '[]'
      - '[1,2,3,4,5,6,7]'
      - 'function my_count(list) { return  _; }'
      - my_count
      - '(_) ? (_) : (_)'
    goal:
      - 5
      - 7
    toolbox:
      - 0
      - 1
      - (_) == (_)
      - (_) + (_)
      - __unlimited; list
      - tail
      - __unlimited; my_count
    defines: []
    globals: {}
    textgoal: ''
  - board:
      - >-
        function filter(list,f) { return  ((list) == ([])) ? ([]) :
        ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list),
        f))) : (filter(tail(list), f))); }
      - (e) => (e) == (1)
      - (e) => (e) > (1)
      - (e) => (e) > (5)
    goal:
      - '[1]'
      - '[2,3,4]'
      - '[]'
    toolbox:
      - '__unlimited; [1,2,3,4]'
      - __unlimited; filter
    defines:
      - >-
        function filter(list,f) { return  ((list) == ([])) ? ([]) :
        ((((f)(head(list))) == (true)) ? (cons(head(list), filter(tail(list),
        f))) : (filter(tail(list), f))); }
    globals: {}
    textgoal: Introducing Filter
  - board:
      - filter
      - filter
      - num
      - 'function biggerThanZero(num) { return  _; }'
    goal:
      - '[]'
      - '[3,2,1]'
    toolbox:
      - (_) > (0)
      - __unlimited; biggerThanZero
      - '[0,3,2,1]'
      - '[0,0,0,0]'
    defines: []
    globals: {}
    textgoal: Remove Zeros in Lists
  - board:
      - 'function keepTrue(list) { return  _; }'
      - (x) => _
      - '[false,false,false,true]'
      - '[false,false,true,false]'
      - '[false]'
    goal:
      - '[]'
      - '[true]'
      - '[true]'
    toolbox:
      - x
      - filter
      - list
      - __unlimited; keepTrue
      - (_) == (true)
    defines: []
    globals: {}
    textgoal: Keep True Values in the Lists
  - board:
      - 'function removeNumber(list,num){ return _;}'
      - list
      - 3
      - 12
      - '[12,3,3,3,12,12,3]'
    goal:
      - '[]'
    toolbox:
      - x
      - num
      - __unlimited; removeNumber
      - '!(_ == _)'
      - x => _
      - filter
    defines: []
    globals: {}
    textgoal: Remove a Specific Number from List
  - board:
      - 'function my_filter(list,f) { return  _; }'
      - '[]'
      - '[]'
      - cons
      - '(_) ? (_) : (_)'
      - my_filter
      - my_filter
      - '(_) ? (_) : (_)'
      - (f)(_)
      - (_) == (_)
    goal:
      - '[2]'
      - '[1,2,3]'
    toolbox:
      - __unlimited; f
      - __unlimited; list
      - __unlimited; my_filter
      - (e) => (e) == (e)
      - (e) => (e) == (2)
      - __unlimited; head
      - __unlimited; tail
      - '__unlimited; [1,2,3]'
    defines: []
    globals: {}
    textgoal: Build Filter
  - board: []
    goal: []
    toolbox:
      - addOne
    defines:
      - 'function fold(f, a, i) { return 0;}'
    globals: {}
    textgoal: play
