fade,board,goal,textgoal,toolbox,defines,output,globals,syntax,animationScales
[{}],"['function count(a) {return (a == []) ? 0: count(remove_first(a)) + 1}', '[A, A, C, A]']",['4'],Let's count to 4!,"['count', 'first']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],['function count(a) {return (a == _) ? _: count(remove_first(a)) + 1}'],['0'],Can you count a list with no items in it? ,"['count', 'remove_first', '0', '[]', '[]', '[A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count(a) {return (a == []) ? 0: _ + _}', 'count']",['3'],Let's count to 3!,"['count', 'remove_first', '1', '[B, B, B]', 'a', '0']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count(a) {return (a == _) ? _ : _ + _}', 'count']",['4'],Can you count a mixed list?,"['remove_first', 'count', '0', '1', 'a', '[A, B, C, A]', '[]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['3'],Can you count only one type of object? ,"['count_target', 'A', 'B', '[A, B, A, A]']","['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(_ == _) ? _: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['0'],Let's count a list of 0!,"['count_target', 'A', 'B', '0', '1', '[]', '[]', 'a']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (_ == _) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['1'],Can you count to 1? ,"['count_target', 'first', 'remove_first', 'a', 'target', '[B, A, A]', 'B']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? _ + _: count_target(remove_first(a), target)}']",['3'],Can we still count this list? ,"['first', 'remove_first', '0', '1', 'count_target', 'target', 'a', 'A', 'count_target', '[A, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: _}']",['2'],Can you fill out the bottom part? ,"['0', '1', 'target', 'remove_first', 'first', 'count_target', 'B', '[B, A, B]', 'a', 'count_target']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0:( _ == _) ? _ + _: _}']",['3'],Can you fill out the whole thing? ,"['__unlimited; first', '__unlimited; target', '__unlimited; a', '__unlimited; count_target',  '__unlimited; remove_first', '1', '0', 'B', '[B, B, B, A]' ]",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (_ == _) ? _ + _: _}']",['2'],Let's fill out the whole function!,"['__unlimited; first', '__unlimited; target', '__unlimited; a', '__unlimited; remove_first', '__unlimited; count_target', '__unlimited; 0', '__unlimited; 1', '__unlimited; []', 'A', 'B', '[A, B, B, A]', '[]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],['concat'],"['[A, B, A]']","Just as a reminder, concat glues two arrays together. ","['[A]', '[B, A]']",,[],{},[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']","['[A, A, A]']",Can you remove something from this list? ,"['remove_value', 'B', '[A, B, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(_ == _) ? _: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']",['[]'],What happens when you put in an empty list? ,"['remove_value', '__unlimited; []', '0', '1', 'a']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (_ == _) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']","['[B, B, B]']",What do you want to remove? ,"['remove_value', 'remove_first', 'first', 'a', 'target', 'A', 'B', '[A, B, B, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : concat([first(a)], remove_value(a, target))}']","['[A, A]']",What happens when your first item is the target? ,"['__unlimited; remove_value', 'remove_first', 'target', 'first', 'a', 'concat', 'B', '[A, B, A, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a, target), _ ):concat([first(a)], remove_value(a, target))}']","['[B, B]']",What happens when your first item isn't the target? ,"['concat', '[first(a)]', 'first', '__unlimited; a', '__unlimited; remove_value', 'remove_first', 'target', 'A', '[A, A, B, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : _}']","['[A, A, A]']",Can you fill out the entire bottom section? ,"['__unlimited; concat', '__unlimited; [first(a)]', '__unlimited; first', '__unlimited; a', '__unlimited; remove_value', '__unlimited; remove_first', '__unlimited; target', 'A', '[A, B, B, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(_ == _) ? _: (_ == _) ? _ : _}', '[A, B, A, A]', 'B'] ","['[A, A, A]']",Can you fill out the whole thing? ,"['__unlimited; concat', '__unlimited; [first(a)]', '__unlimited; first', '__unlimited; a', '__unlimited; remove_value', '__unlimited; remove_first', '__unlimited; target', '__unlimited; []', '__unlimited; 0']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(a == []) ? [] : (first(a) == target) ? concat([replacement], replace_value(remove_first(a), target, replacement)): concat([first(a)],replace_value(remove_first(a), target, replacement))}', 'replace_value', '[5, 6, 7]']","['[5, 8, 7]']",Replace value allows you to replace one value for another. ,"['6', '8', '7']","['function replace_value(a, target, replacement) {(a == []) ? [] : (first(a) == target) ? concat([replacement], replace_value(remove_first(a), target, replacement)): concat([first(a)],replace_value(remove_first(a), target, replacement))}']",[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(_ == _) ? _ : (first(a) == target) ? concat([replacement], replace_value(remove_first(a), target, replacement)): concat([first(a)],replace_value(remove_first(a), target, replacement))}', 'replace_value', '[5, 6, 7]']",['[]'],What happens when you have an empty list? ,"['0', 'a', '__unlimited; []']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(a == []) ? [] : (_ == _) ? concat([replacement], replace_value(remove_first(a), target, replacement)): concat([first(a)],replace_value(remove_first(a), target, replacement))}', 'replace_value', '[4, 7, 8]', '7', '9']","['[4, 9, 8]']",How can you make sure you are replacing the right value? ,"['first', 'a', 'target', 'replacement', 'remove_first']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(a == []) ? [] : (first(a) == target) ?  _: concat([first(a)],replace_value(remove_first(a), target, replacement))}', 'replace_value', '[6, 7, 11]', '11', '9']","['[6, 7, 9]']",What happens when the first value is the target? ,"['concat', 'replacement', '[replacement]', 'replace_value', 'first', 'a', 'remove_first', 'target']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(a == []) ? [] : (first(a) == target) ? concat([replacement], replace_value(remove_first(a), target, replacement)): _}', 'replace_value', '[3,4]', '5', '3']","['[5, 4]']",What happens if the first value isn't the target? ,"['concat', 'first', '[first]', 'a', 'replace_value', 'a', 'remove_first', 'target', 'replacement', '[remove_first]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(a == []) ? [] : (first(a) == target) ? _ : _}', 'replace_value', '[7,9]', '9', '2']","['[7, 2]']",Let's fill out the bottom part!,"['__unlimited; concat', '__unlimited; replacement', '__unlimited; [replacement]', '__unlimited; replace_value', '__unlimited; remove_first', '__unlimited; a', '__unlimited; target', '__unlimited; first', '__unlimited; [first]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function replace_value(a, target, replacement) {(_ == _) ? _: (_ == _) ? _ : _}', 'replace_value', '[12, 15, 21]', '12', '14']","['[14, 15, 21]']",Let's fill out the whole function!,"['__unlimited; concat', '__unlimited; replacement', '__unlimited; [replacement]', '__unlimited; replace_value', '__unlimited; remove_first', '__unlimited; a', '__unlimited; target', '__unlimited; first', '__unlimited; [first]', '__unlimited; []']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? concat([first(a)], insert_in_order(remove_first(a), target)): concat([target],a)}', 'insert_in_order', '[10, 15, 18]']","['[10, 14, 15, 18']",Insert in order inserts a number so the whole list is sorted. ,['14'],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? concat([first(a)], insert_in_order(remove_first(a), target)): concat([target],a)}']",[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(_ == _) ? _ : (first(a) < target) ? concat([first(a)], insert_in_order(remove_first(a), target)): concat([target],a)}', 'insert_in_order', '[]', '2']",['[2]'],What happens when you have an empty list? ,"['a', '0', '[]', 'target', '[target]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (_ < _) ? concat([first(a)], insert_in_order(remove_first(a), target)): concat([target],a)}', 'insert_in_order', '[1, 2, 3]', '4']","['[1, 2, 3, 4]']",How do you make sure you are inserting in the right place? ,"['first', 'a', 'target', 'remove_first', '[target]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? _: concat([target],a)}', 'insert_in_order', '[5, 6]', '7']","['[5, 6, 7]']",What happens when your position value is less than the target? ,"['target', 'a', 'remove_first', '[remove_first]', 'insert_in_order', '[first]', 'a', 'first', 'concat']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? concat([first(a)], insert_in_order(remove_first(a), target)): _}', 'insert_in_order', '[6, 7, 8]', '9']","['[6, 7, 8, 9]']",What happens when your position value is more than the target? ,"['concat', 'a', 'target', '[target]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? _ : _}', 'insert_in_order', '[10, 15, 23]', '21']","['[10, 15, 21, 23]']",Let's fill out the bottom part!,"['__unlimited; concat', '__unlimited; first', '__unlimited; [first]', '__unlimited; a', '__unlimited; insert_in_order', '__unlimited; remove_first', '__unlimited; target', '__unlimited; [target]'] ",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function insert_in_order(a, target) {(a == []) ? [target] : (first(a) < target) ? _ : _}', 'insert_in_order', '[25, 29, 36]', '21']","['[21, 25, 29, 36]']",Let's fill out the whole function!,"['__unlimited; concat', '__unlimited; first', '__unlimited; [first]', '__unlimited; a', '__unlimited; insert_in_order', '__unlimited; remove_first', '__unlimited; target', '__unlimited; [target]', '__unlimited; []'] ",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
