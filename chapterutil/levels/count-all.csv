fade,board,goal,textgoal,toolbox,defines,output,globals,syntax,animationScales
[{}],"['function count(a) {return (a == []) ? 0: count(remove_first(a)) + 1}', '[A, A, C, A]']",['4'],Let's count to 4!,"['count', 'first']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],['function count(a) {return (a == _) ? _: count(remove_first(a)) + 1}'],['0'],Can you count a list with no items in it? ,"['count', 'remove_first', '0', '[]', '[]', '[A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count(a) {return (a == []) ? 0: _ + _}', 'count']",['3'],Let's count to 3!,"['count', 'remove_first', '1', '[B, B, B]', 'a', '0']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count(a) {return (a == _) ? _ : _ + _}', 'count']",['4'],Can you count a mixed list?,"['remove_first', 'count', '0', '1', 'a', '[A, B, C, A]', '[]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['3'],Can you count only one type of object? ,"['count_target', 'A', 'B', '[A, B, A, A]']","['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(_ == _) ? _: (first(a) == target) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['0'],Let's count a list of 0!,"['count_target', 'A', 'B', '0', '1', '[]', '[]', 'a']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (_ == _) ? count_target(remove_first(a), target) + 1: count_target(remove_first(a), target)}']",['1'],Can you count to 1? ,"['count_target', 'first', 'remove_first', 'a', 'target', '[B, A, A]', 'B']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? _ + _: count_target(remove_first(a), target)}']",['3'],Can we still count this list? ,"['first', 'remove_first', '0', '1', 'count_target', 'target', 'a', 'A', 'count_target', '[A, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (first(a) == target) ? count_target(remove_first(a), target) + 1: _}']",['2'],Can you fill out the bottom part? ,"['0', '1', 'target', 'remove_first', 'first', 'count_target', 'B', '[B, A, B]', 'a', 'count_target']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0:( _ == _) ? _ + _: _}']",['3'],Can you fill out the whole thing? ,"['__unlimited; first', '__unlimited; target', '__unlimited; a', '__unlimited; count_target',  '__unlimited; remove_first', '1', '0', 'B', '[B, B, B, A]' ]",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function count_target(a, target) {(a == []) ? 0: (_ == _) ? _ + _: _}']",['2'],Let's fill out the whole function!,"['__unlimited; first', '__unlimited; target', '__unlimited; a', '__unlimited; remove_first', '__unlimited; count_target', '__unlimited; 0', '__unlimited; 1', '__unlimited; []', 'A', 'B', '[A, B, B, A]', '[]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],['concat'],"['[A, B, A]']","Just as a reminder, concat glues two arrays together. ","['[A]', '[B, A]']",,[],{},[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']","['[A, A, A]']",Can you remove something from this list? ,"['remove_value', 'B', '[A, B, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(_ == _) ? _: (first(a) == target) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']",['[]'],What happens when you put in an empty list? ,"['remove_value', '__unlimited; []', '0', '1', 'a']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (_ == _) ? remove_value(remove_first(a), target): concat([first(a)], remove_value(a, target))}']","['[B, B, B]']",What do you want to remove? ,"['remove_value', 'remove_first', 'first', 'a', 'target', 'A', 'B', '[A, B, B, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"[' function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : concat([first(a)], remove_value(a, target))}']","['[A, A]']",What happens when your first item is the target? ,"['__unlimited; remove_value', 'remove_first', 'target', 'first', 'a', 'concat', 'B', '[A, B, A, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? remove_value(remove_first(a, target), _ ):concat([first(a)], remove_value(a, target))}']","['[B, B]']",What happens when your first item isn't the target? ,"['concat', '[first(a)]', 'first', '__unlimited; a', '__unlimited; remove_value', 'remove_first', 'target', 'A', '[A, A, B, B]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(a == []) ? []: (first(a) == target) ? _ : _}']","['[A, A, A]']",Can you fill out the entire bottom section? ,"['__unlimited; concat', '__unlimited; [first(a)]', '__unlimited; first', '__unlimited; a', '__unlimited; remove_value', '__unlimited; remove_first', '__unlimited; target', 'A', '[A, B, B, A, A]']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
[{}],"['function remove_value(a, target) {(_ == _) ? _: (_ == _) ? _ : _}', '[A, B, A, A]', 'B'] ","['[A, A, A]']",Can you fill out the whole thing? ,"['__unlimited; concat', '__unlimited; [first(a)]', '__unlimited; first', '__unlimited; a', '__unlimited; remove_value', '__unlimited; remove_first', '__unlimited; target', '__unlimited; []', '__unlimited; 0']",,[],"{'first': 'function first(a) {return get(a,0);}','remove_first': 'function remove_first(a) {return length(a) < 2 ? [] : slice(a, 1, length(a))}'}",[],{}
