board,goal,textgoal,,toolbox,defines,globals,syntax,animationScales
"[""function isTriangle(x) { return x == 'triangle'; }"", ""__tests(testMe('triangle'), testMe('rect'))""]","['true', 'false']",,,['__unlimited; isTriangle;'],"[""function isTriangle(x) { return x == 'triangle'; }""]",{},[],{}
"['function isStar(x) { return _; }', ""__tests(testMe('star'), testMe('rect'), testMe('star'))""]","['true', 'false', 'true']","Define a function that outputs true if x is {a star}, otherwise false",,"['__unlimited; isStar;', 'x == _', ""'triangle'"", ""'rect'"", ""'star'""]","[""function isStar(x) { return x == 'star'; }""]",{},[],{}
"['__argumentAnnotated; function isZero(x) { return _; }', '_ == _', '__tests(testMe(1), testMe(0), testMe(3), testMe(0))']","['false', 'true', 'false', 'true']","Define a function that outputs true if x is 0, otherwise false",,"['__unlimited; isZero;', '(x) => _', 'x', 'y', '0', '1', '2']",['function isZero(x) { return x == 0; }'],{},[],{}
"['__argumentAnnotated; function equals(x, y) { return _; }', '_ == _', '(y) => _', '__tests(testMe(1, 2), testMe(2, 2), testMe(3, 3))']","['false', 'true', 'true']","Define a function that outputs true if x and y are equal, otherwise false",,"['__unlimited; equals;', '(x) => _', 'x', 'y', '0', '1']","['function equals(x, y) { return x == y; }']",{},[],{}
"[""function noStar(x) { return _ ? 'rect' : x; }"", 'x == _', ""__tests(testMe('rect'), testMe('star'), testMe('triangle'))""]","[""rect"", 'rect', 'triangle']",Define a function that outputs anything but {a star},,"['__unlimited; noStar;', ""'star'"", ""'rect'"", ""'triangle'""]",,{},[],{}
"['__argumentAnnotated; function alwaysOne(x) { return _; }', '_ ? x : 1', '(x) => _', '__tests(testMe(1), testMe(2), testMe(3))']","['1', '1', '1']",Define a function that always outputs 1,,"['__unlimited; alwaysOne;', 'x', '_ == _', '1 == _', '2', '3']",['function alwaysOne(x) { return x == 1 ? x : 1; }'],{},[],{}
"['function firstNonZero(x, y) { return _; }', '_ ? _ : x', '__tests(testMe(1, 2), testMe(0, 1), testMe(2, 0), testMe(3, 2))']","['1', '1', '2', '3']",Define a function that outputs the first non zero value of x and y. ,,"['__unlimited;isZero;', '__unlimited; firstNonZero; ', 'x', 'y', 'x', 'y', '__unlimited; _(_)']","['function firstNonZero(x, y) { return x == 0 ? x : y; }']",{},[],{}